#!/bin/sh

# Blocクラスの名前(大文字キャメルケース)
blocName=$1;

# Flutterのプロジェクトの名前(小文字スネークケース)
packageName=$2;

# blocNameの小文字スネークケース
lower=`echo ${blocName} | sed -E 's/(.)([A-Z])/\1_\2/g' | tr '[A-Z]' '[a-z]'`

mkdir $lower
cd $lower

# Blocクラスファイルの生成
echo "import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:${packageName}/bloc/${lower}/${lower}_event.dart';
import 'package:${packageName}/bloc/${lower}/${lower}_state.dart';

class ${blocName}Bloc extends Bloc<${blocName}Event, ${blocName}State> {

  ${blocName}Bloc() : super(const ${blocName}State()) {
    on<OnFirstRequest>(_onFirstRequest);
    add(OnFirstRequest());
  }

  _onFirstRequest(OnFirstRequest event, Emitter<${blocName}State> emit) async {}
}" >> ${lower}_bloc.dart

# イベントクラスファイルの生成
echo "import 'package:equatable/equatable.dart';

abstract class ${blocName}Event extends Equatable {
  const ${blocName}Event();

  @override
  List<Object?> get props => [];
}

class OnFirstRequest extends ${blocName}Event {}" >> ${lower}_event.dart

# Stateクラスファイルの生成
echo "import 'package:${packageName}/enum/api_request_status.dart';
import 'package:${packageName}/mixin/api_request_state.dart';

class ${blocName}State extends Equatable {

  const ${blocName}State({
    ApiRequestStatus requestStatus = ApiRequestStatus.idle,
    String? errorMessage,
  }) : super(
          requestStatus: requestStatus,
          errorMessage: errorMessage,
        );

  ${blocName}State copyWith({
    ApiRequestStatus? apiRequestStatus,
    String? apiErrorMessage,
  }) {
    return ${blocName}State(
      requestStatus: apiRequestStatus ?? ApiRequestStatus.idle,
      errorMessage: apiErrorMessage,
    );
  }

  @override
  List<Object?> get props => [
        requestStatus,
        errorMessage,
      ];
}" >> ${lower}_state.dart